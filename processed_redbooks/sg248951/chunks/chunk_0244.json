{
  "content": "instruction stream. IBM z16 integrates a new branch prediction design that uses SRAM and supports the following enhancements over IBM z15: \u0002 BTB1: 8 K - 12 K \u0002 BTB2: up to 260 K \u0002 TAGE PHT: 4 k x 2 \u0002 TAGE CTB: 1 k x 2 3.4.11 Wild branch When a bad pointer is used or when code overlays a data area that contains a pointer to code, a random branch is the result. This process causes a 0C1 or 0C4 abend. Random branches are difficult to diagnose because clues about how the system got to that point are not evident. With the wild branch hardware facility, the last address from which a successful branch instruction was run is kept. z/OS uses this information with debugging aids, such as the SLIP command, to determine from where a wild branch came. It also can collect data from that storage location. This approach decreases the number of debugging steps that are necessary when you want to know from where the branch came. 96 IBM z16 (3931) Technical Guide 3.4.12 Translation lookaside buffer The",
  "metadata": {
    "title": "IBM z16 (3931) Technical Guide",
    "author": "IBM",
    "date": "D:20241025140729Z",
    "abstract": null,
    "keywords": [
      "Resource Link Sterling System z System z10 System z9 VTAM WebSphere z Systems z/Architecture z/OS z/VM z/VSE z13 z13s z15 z16 z9 zEnterprise Linux Evolution Windows Microsoft Java Red Hat UNIX VMware AIX CICS Connect:Direct"
    ],
    "file_name": "sg248951.pdf",
    "file_size": 23877593,
    "page_count": 564,
    "processed_date": "2025-03-17T13:37:11.146563",
    "chunk_number": 244,
    "word_count": 183
  }
}